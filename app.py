from flask import Flask, request, render_template, url_for, redirect, abort
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import random
from headhunter import data_vacancies, get_salar_average, get_skills


app = Flask(__name__)

# –í—ã–≤–æ–¥–∏—Ç —Å–ª–∞–≤—è–Ω–æ–ø–∏—Å–∏
app.config['JSON_AS_ASCII'] = False

about_me = {
           "name": "–ê—Ä—Ç–µ–º",
           "surname": "–†–æ–∂–∫–æ–≤",
           "email": "artemwhite666@gmail.com",
           "mobile_phone": "+7 916 440 6 110",
           "telegram": "@ArtemWhite",
           "website": "http://www.heyartem.ru/"
        }


@app.route("/about")
def about():
    
    # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å url page 
    print(url_for("about"))

    return render_template("about.html", about_me=about_me)


@app.route("/")
def hello_world():

    # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∞–¥—Ä–µ—Å–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print(url_for("hello_world"))
    data = "Hello, World! & –ü—Ä–∏–≤–µ—Ç –ê—Ä—Ç–µ–º!"

    return render_template ("hello.html", data= data)
    # return "Hello, World! & –ü—Ä–∏–≤–µ—Ç –ê—Ä—Ç–µ–º!"


# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ –ë–î —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'

# —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ db
db = SQLAlchemy(app)


# –º–æ–¥–µ–ª—å –±–ª–æ–≥–∞ —Å–æ —Å—Ç–∞—Ç—å—è–º–∏
class Article(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title_art = db.Column(db.String(100), nullable=False)   
    intro_art = db.Column(db.String(300), nullable=False)
    text_art = db.Column(db.Text, nullable=False)
    date_art = db.Column(db.DateTime, default=datetime.utcnow)

    # –∫–æ–≥–¥–∞ –±—É–¥—É –≤—ã–±–∏—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç, —Ç–æ –±—É–¥—É –ø–æ–ª—É—á–∞—Ç—å –∏ –æ–±—ä–µ–∫—Ç –∏ id
    def __repr__(self) -> str:        
        return Article


# —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (POST-–ø—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã) –∞ –µ—Å–ª–∏ GET –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
@app.route("/create_article", methods=["POST", "GET"])
def create_article():
    print(url_for("create_article"))

    # –ø—Ä–∏–Ω–∏–º–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    if request.method == "POST":
        title_art = request.form["title_art"]
        intro_art = request.form["intro_art"]
        text_art = request.form["text_art"]

        # –ø–µ—Ä–µ–¥–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        article = Article(title_art=title_art, intro_art=intro_art, text_art=text_art)

        # —Å–æ—Ö—Ä–∞–Ω—è—é –æ–±—ä–µ–∫—Ç –≤ –ë–î
        try:
            db.session.add(article) #–¥–æ–±–∞–≤–ª—è—é
            db.session.commit() #—Å–æ—Ö—Ä–∞–Ω—è—é
            return redirect("/posts")   #–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É            
        except:
            return "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    else:
        return render_template("/article_posts/create_article.html")
    

# –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
@app.route("/posts")
def all_posts():
    print(url_for("all_posts"))

    # # –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    # articles = Article.query.all()

    # –≤—Å–µ –ø–æ—Å—Ç—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø –¥–∞—Ç–µ –æ—Ç —Å–≤–µ–∂–∏—Ö, –∫ —Å—Ç–∞—Ä—ã–º
    articles = Article.query.order_by(Article.date_art.desc()).all()

    return render_template("/article_posts/posts.html", articles=articles)


# –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—å–∏
@app.route("/posts/<int:id>")
def post_detail(id):    
    article = Article.query.get(id)

    return render_template("/article_posts/post_detail.html", article=article)


# —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
@app.route("/posts/<int:id>/delete")
def post_delete(id):    
    article = Article.query.get_or_404(id)  # –≤ —Å–ª—É—á–∞–µ –Ω–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É 404

    try:
        db.session.delete(article)
        db.session.commit()
        return redirect("/posts")
    except:
        return "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"


# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
@app.route("/posts/<int:id>/update", methods=["POST", "GET"])
def post_update(id):    
    article = Article.query.get(id)

    if request.method == "POST":
        article.title_art = request.form["title_art"]
        article.intro_art = request.form["intro_art"]
        article.text_art = request.form["text_art"]

        try:            
            db.session.commit()
            return redirect("/posts")
        except:
            return "–ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    else:        
        return render_template("/article_posts/post_update.html", article=article)


# –ü—Ä–∏–º–µ—Ä 2, —Ä–∞–±–æ—Ç–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
quotes = [
   {
       "id": 1,
       "author": "Rick Cook",
       "text": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –≥–æ–Ω–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º, —Å—Ç—Ä–µ–º—è—â–∏—Ö—Å—è –ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –±–æ–ª—å—à–µ–π –∏ –ª—É—á—à–µ–π –∏–¥–∏–æ—Ç–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é, –∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –æ—Ç–±–æ—Ä–Ω—ã—Ö –∏–¥–∏–æ—Ç–æ–≤. –ü–æ–∫–∞ –≤—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–±–µ–∂–¥–∞–µ—Ç."
   },
   {
       "id": 2,
       "author": "Waldi Ravens",
       "text": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –° –ø–æ—Ö–æ–∂–µ –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ —Ç–∞–Ω—Ü—ã –Ω–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—É –ª—é–¥–µ–π —Å –æ—Å—Ç—Ä—ã–º–∏ –±—Ä–∏—Ç–≤–∞–º–∏ –≤ —Ä—É–∫–∞—Ö."
   },
   {
       "id": 3,
       "author": "Mosher‚Äôs Law of Software Engineering",
       "text": "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å–ª–∏ –±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ, –≤–∞—Å –±—ã —É–≤–æ–ª–∏–ª–∏."
   },
   {
       "id": 4,
       "author": "Yoggi Berra",
       "text": "–í —Ç–µ–æ—Ä–∏–∏, —Ç–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ—Ä–∞–∑–¥–µ–ª–∏–º—ã. –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —ç—Ç–æ –Ω–µ —Ç–∞–∫."
   },

]


# –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç
@app.route("/quotes")
def all_quotes():
    print(url_for("all_quotes"))

    # –ø—Ä–∏ –≤—ã–≤–æ–¥–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ id
    return render_template("/quotes/quotes.html", quotes=quotes[::-1])


# –≤—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ —Ü–∏—Ç–∞—Ç
@app.route("/quotes/digital")
def quotes_digital():
    print(url_for("quotes_digital"))

    digital= {
        "total_quotes": len(quotes)
    }

    return render_template("/quotes/quotes_digital.html", digital=digital)


# –≤—ã–≤–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
@app.route("/quotes/random")
def quotes_random():    
    print(url_for("quotes_random"))
    quote_random = random.choice(quotes)

    return render_template("/quotes/quotes_random.html", quote_random=quote_random)


# —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ id —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –µ–µ –≤—ã–≤–æ–¥–∞
@app.route("/quotes/input_id")
def quote_input_form_id():
    print(url_for("quote_input_form_id"))

    return render_template("/quotes/quote_input_id.html")


# —Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–∏—Ç–∞—Ç—ã –ø–æ id
@app.route("/quotes/response_id_form", methods=["POST", "GET"])
def input_id_form(): 

    if request.method == "POST":
        id_quote = int(request.form["id_qu"])        

        for quote in quotes:
            if quote["id"] == id_quote:                
                return render_template("/quotes/quote_id.html", quote=quote)

        else:
            text = "–¶–∏—Ç–∞—Ç—ã —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç üòï"
            return render_template("/quotes/quotes_no.html", text=text) 
    

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã 
@app.route("/quotes/create", methods=["POST", "GET"])
def new_quote():
    print(url_for("new_quote")) 
    
    # –ø—Ä–∏–Ω–∏–º–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    if request.method == "POST":
        author = request.form["author"]
        text = request.form["text"]
        last_id = quotes[-1]["id"]
        new_id = last_id + 1

        new_quote = {        
            "id": new_id,
            "author": author,
            "text": text
        }
        quotes.append(new_quote)

        try:
            return redirect("/quotes") # –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—ã–≤–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏            
        except:
            return "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    else:
        return render_template("/quotes/quote_create.html")        


# —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
@app.route("/quotes/<int:id>/delete")
def delete_quotes(id):    
    for quote in quotes:
        if int(id) == quote["id"]:
            quotes.remove(quote)
            
            return redirect("/quotes")


# –ü—Ä–∏–º–µ—Ä 3, —Ä–∞–±–æ—Ç–∞ —Å api head hunter
# –§–æ–º–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
@app.route("/hh", methods=["POST", "GET"])
def hh():
    # –ø—Ä–∏–Ω–∏–º–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    if request.method == "POST":
        data_user = request.form["data_user"]     
        data_vacancies(data_user)
        avg_salary = get_salar_average()
        skills = get_skills()
        return render_template("/hh/hh.html", avg_salary=avg_salary, skills=skills)
    else:
        skills = []
        return render_template("/hh/hh.html", skills=skills)


def main():
    app.run(debug=True)


if __name__ == "__main__":
    main()
